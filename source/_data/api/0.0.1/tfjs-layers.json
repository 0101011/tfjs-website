{
  "docs": {
    "headings": [
      {
        "name": "Models",
        "description": "",
        "subheadings": [
          {
            "name": "Classes",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "Model",
                "documentation": "The `Model` class adds training & evaluation routines to a `Container`.\n\nA `Model` is the basic unit of training, inference and evaluation in\nTensorFlow.js. `tf.model` is a factory function that creates an instance\nof `Model`.\n\nTo create a `Model`, specify its input(s) and output(s). Inputs are\n`SymbolicTensor`s provided by `Input` layers. Outputs are `SymbolicTensor`s\nprovided by other layers that perform mathematical and neural-network\noperations.\n\nFor example, the following code snippet defines a model consisting of\ntwo `dense` layers, with of 10 and 4 units, respectively.\n\n```js\n// Define input, which has a size of 5 (not including batch dimension).\nconst input = tf.input({shape: [5]});\n\n// First dense layer uses relu activation.\nconst denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n// Second dense layer uses softmax activation.\nconst denseLayer2 = tf.layers.dense({units: 2, activation: 'softmax'});\n\n// Obtain the output symbolic tensor by applying the layers on the input.\nconst output = denseLayer2.apply(denseLayer1.apply(input));\n\n// Create the model based on the inputs.\nconst model = tf.model({inputs: input, outputs: output});\n\n// The model can be used for training, evaluation and prediction.\n// For example, the following line runs prediction with the model on\n// some fake data.\nmodel.predict(tf.ones([2, 5])).print();\n```\n\nSee also:\n   `Sequential`, `modelFromJSON`, `loadModel`.",
                "fileName": "#613",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/engine/training.ts#L613-L1574",
                "methods": [],
                "isClass": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Classes"
                },
                "symbolName": "Sequential",
                "documentation": "A model with a stack of layers, feeding linearly from one to the next.\n\n`tf.sequential` is a factory function that creates an instance of\n`Sequential`.\n\n# Arguments",
                "fileName": "#150",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/models.ts#L150-L474",
                "methods": [],
                "isClass": true
              }
            ]
          },
          {
            "name": "Creation",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Creation",
                  "useDocsFrom": "Model",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "model",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "ContainerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.inputs",
                    "documentation": "",
                    "type": "SymbolicTensor|SymbolicTensor[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.outputs",
                    "documentation": "",
                    "type": "SymbolicTensor|SymbolicTensor[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.name",
                    "documentation": "",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Model",
                "documentation": "The `Model` class adds training & evaluation routines to a `Container`.\n\nA `Model` is the basic unit of training, inference and evaluation in\nTensorFlow.js. `tf.model` is a factory function that creates an instance\nof `Model`.\n\nTo create a `Model`, specify its input(s) and output(s). Inputs are\n`SymbolicTensor`s provided by `Input` layers. Outputs are `SymbolicTensor`s\nprovided by other layers that perform mathematical and neural-network\noperations.\n\nFor example, the following code snippet defines a model consisting of\ntwo `dense` layers, with of 10 and 4 units, respectively.\n\n```js\n// Define input, which has a size of 5 (not including batch dimension).\nconst input = tf.input({shape: [5]});\n\n// First dense layer uses relu activation.\nconst denseLayer1 = tf.layers.dense({units: 10, activation: 'relu'});\n// Second dense layer uses softmax activation.\nconst denseLayer2 = tf.layers.dense({units: 2, activation: 'softmax'});\n\n// Obtain the output symbolic tensor by applying the layers on the input.\nconst output = denseLayer2.apply(denseLayer1.apply(input));\n\n// Create the model based on the inputs.\nconst model = tf.model({inputs: input, outputs: output});\n\n// The model can be used for training, evaluation and prediction.\n// For example, the following line runs prediction with the model on\n// some fake data.\nmodel.predict(tf.ones([2, 5])).print();\n```\n\nSee also:\n   `Sequential`, `modelFromJSON`, `loadModel`.",
                "fileName": "#41",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L41-L49",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Creation",
                  "useDocsFrom": "Sequential",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "sequential",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "SequentialConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.layers",
                    "documentation": "Stack of layers for the model. ",
                    "type": "Layer[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.name",
                    "documentation": "The name of this model. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Sequential",
                "documentation": "A model with a stack of layers, feeding linearly from one to the next.\n\n`tf.sequential` is a factory function that creates an instance of\n`Sequential`.\n\n# Arguments",
                "fileName": "#51",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L51-L59",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Loading",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Loading",
                  "useDocsFrom": "loadModelInternal",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "loadModel",
                "paramStr": "(modelAndWeights)",
                "parameters": [
                  {
                    "name": "modelAndWeights",
                    "documentation": "",
                    "type": "ModelAndWeightsConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "modelAndWeights.modelTopology",
                    "documentation": "",
                    "type": "JsonValue|string",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "modelAndWeights.weightsManifest",
                    "documentation": "",
                    "type": "WeightsManifestConfig",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Promise",
                "documentation": "Load a model, including its topology and weights.",
                "fileName": "#61",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L61-L69",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Loading",
                  "useDocsFrom": "modelFromJSONInternal"
                },
                "symbolName": "modelFromJSON",
                "paramStr": "(jsonString, customObjects?)",
                "parameters": [
                  {
                    "name": "jsonString",
                    "documentation": "",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "customObjects",
                    "documentation": "",
                    "type": "ConfigDict",
                    "optional": true,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Model",
                "documentation": "Parses a JSON model configuration file and returns a model instance.\n  ",
                "fileName": "#71",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L71-L78",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Inputs",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Inputs",
                  "useDocsFrom": "Input",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "input",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "InputConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.shape",
                    "documentation": "A shape, not including the batch size. For instance, `shape=[32]`\nindicates that the expected input will be batches of 32-dimensional\nvectors.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.batchShape",
                    "documentation": "A shape tuple (integer), including the batch size. For instance,\n`batchShape=[10, 32]` indicates that the expected input will be batches of\n10 32-dimensional vectors. `batchShape=[null, 32]` indicates batches of an\narbitrary number of 32-dimensional vectors.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.name",
                    "documentation": "An optional name string for the layer. Should be unique in a model (do not\nreuse the same name twice). It will be autogenerated if it isn't provided.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.dtype",
                    "documentation": "",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.sparse",
                    "documentation": "A boolean specifying whether the placeholder to be created is sparse.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "SymbolicTensor",
                "documentation": "`Input()` is used to instantiate a SymbolicTensor, and represents\nthe input to a model.\n\nExample:\n\n     // this is a logistic regression in TF.js Layers:\n     x = new Input(shape=[32]);\n     y = new Dense(16, activation='softmax').apply(x);\n     model = new Model(x, y);",
                "fileName": "#80",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L80-L88",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Models",
                  "subheading": "Inputs",
                  "useDocsFrom": "InputLayer",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "inputLayer",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "InputLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.inputShape",
                    "documentation": "Input shape, not including the batch axis. ",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.batchSize",
                    "documentation": "Optional input batch size (integer or null). ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.batchInputShape",
                    "documentation": "Batch input shape, including the batch axis. ",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.dtype",
                    "documentation": "Datatype of the input.  ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.sparse",
                    "documentation": "Whether the placeholder created is meant to be sparse.\n\nTODO(michaelterry): Not clear whether we'll need this or not.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.name",
                    "documentation": "Name of the layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "InputLayer",
                "documentation": "Layer to be used as an entry point into a graph.",
                "fileName": "#90",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L90-L98",
                "isFunction": true
              }
            ]
          }
        ]
      },
      {
        "name": "Layers",
        "description": "",
        "subheadings": [
          {
            "name": "Convolutional",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Conv1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "conv1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "ConvLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.kernelSize",
                    "documentation": "The dimensions of the convolution window. If kernelSize is a number, the\nconvolutional window will be square.",
                    "type": "number|number[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.filters",
                    "documentation": "The dimensionality of the output space (i.e. the number output of\nfilters in the convolution).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.strides",
                    "documentation": "The strides of the convolution. If strides is a number, strides in both\ndimensions are equal.\n\nSpecifying any stride value != 1 is incompatible with specifying any\n`dilationRate` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.padding",
                    "documentation": "Padding mode.",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.dataFormat",
                    "documentation": "Format of the data, e.g., CHANNEL_LAST.\n   The ordering of the dimensions in the inputs.\n   `channels_last` corresponds to inputs with shape\n   `(batch, ..., channels)` while `channels_first` corresponds to\n   inputs with shape `(batch, channels, ...)`.\n   Defaults to \"channels_last\".",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.dilationRate",
                    "documentation": "An integer or array of integers, specifying\n   the dilation rate to use for dilated convolution.\n   Currently, specifying any `dilationRate` value != 1 is\n   incompatible with specifying any `strides` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.activation",
                    "documentation": "Activation function of the layer.\n\nIf you don't specify the activation, none is applied\n   (ie. \"linear\" activation: `a(x) = x`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.useBias",
                    "documentation": "Whether the layer uses a bias vector. Defaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.kernelConstraint",
                    "documentation": "Constraint for the kernel weights.",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.biasConstraint",
                    "documentation": "Constraint for the bias vector.",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.kernelRegularizer",
                    "documentation": "Regularizer function applied to the `kernel` weights matrix.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Conv1D",
                "documentation": "1D convolution layer (e.g., temporal convolution).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input over a single spatial (or temporal) dimension\nto produce a tensor of outputs.\nIf `use_bias` is True, a bias vector is created and added to the outputs.\nFinally, if `activation` is not `null` or `undefined`,\nit is applied to the outputs as well.\nWhen using this layer as the first layer in a model,\nprovide an `inputShape` argument Array or `null`, e.g.\n`[10, 128]` for sequences of 10 vectors of 128-dimensional vectors,\nor `[null, 128]` for variable-length sequences of 128-dimensional vectors.",
                "fileName": "#108",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L108-L117",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "Conv2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "conv2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "ConvLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.kernelSize",
                    "documentation": "The dimensions of the convolution window. If kernelSize is a number, the\nconvolutional window will be square.",
                    "type": "number|number[]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.filters",
                    "documentation": "The dimensionality of the output space (i.e. the number output of\nfilters in the convolution).",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.strides",
                    "documentation": "The strides of the convolution. If strides is a number, strides in both\ndimensions are equal.\n\nSpecifying any stride value != 1 is incompatible with specifying any\n`dilationRate` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.padding",
                    "documentation": "Padding mode.",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.dataFormat",
                    "documentation": "Format of the data, e.g., CHANNEL_LAST.\n   The ordering of the dimensions in the inputs.\n   `channels_last` corresponds to inputs with shape\n   `(batch, ..., channels)` while `channels_first` corresponds to\n   inputs with shape `(batch, channels, ...)`.\n   Defaults to \"channels_last\".",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.dilationRate",
                    "documentation": "An integer or array of integers, specifying\n   the dilation rate to use for dilated convolution.\n   Currently, specifying any `dilationRate` value != 1 is\n   incompatible with specifying any `strides` value != 1.",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.activation",
                    "documentation": "Activation function of the layer.\n\nIf you don't specify the activation, none is applied\n   (ie. \"linear\" activation: `a(x) = x`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.useBias",
                    "documentation": "Whether the layer uses a bias vector. Defaults to false.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.biasInitializer",
                    "documentation": "Initializer for the bias vector.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.kernelConstraint",
                    "documentation": "Constraint for the kernel weights.",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.biasConstraint",
                    "documentation": "Constraint for the bias vector.",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.kernelRegularizer",
                    "documentation": "Regularizer function applied to the `kernel` weights matrix.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.activityRegularizer",
                    "documentation": "Regularizer function applied to the activation.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Conv2D",
                "documentation": "2D convolution layer (e.g. spatial convolution over images).\n\nThis layer creates a convolution kernel that is convolved\nwith the layer input to produce a tensor of outputs.\n\nIf `useBias` is True, a bias vector is created and added to the outputs.\n\nIf `activation` is not `None`, it is applied to the outputs as well.\n\nWhen using this layer as the first layer in a model,\nprovide the keyword argument `inputShape`\n(Array of integers, does not include the sample axis),\ne.g. `inputShape=[128, 128, 3]` for 128x128 RGB pictures\nin `dataFormat=DataFormat.CHANNEL_LAST`.",
                "fileName": "#119",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L119-L128",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Convolutional",
                  "namespace": "layers",
                  "useDocsFrom": "DepthwiseConv2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "depthwiseConv2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "DepthwiseConv2DLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.kernelSize",
                    "documentation": "An integer or Array of 2 integers, specifying the width and height of the\n2D convolution window. Can be a single integer to specify the same value\nfor all spatial dimensions.",
                    "type": "number|[number, number]",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.depthMultiplier",
                    "documentation": "The number of depthwise convolution output channels for each input\nchannel.\nThe total number of depthwise convolution output channels will be equal to\n`filtersIn * depthMultiplier`.\nDefault: 1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.depthwiseInitializer",
                    "documentation": "Initializer for the depthwise kernel matrix.\nDefault: GlorotNormal.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.depthwiseConstraint",
                    "documentation": "Constraint for the depthwise kernel matrix.",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.depthwiseRegularizer",
                    "documentation": "Regulzarizer function for the depthwise kernel matrix.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "DepthwiseConv2D",
                "documentation": "Depthwise separable 2D convolution.\n\nDepthwise Separable convolutions consists in performing just the first step\nin a depthwise spatial convolution (which acts on each input channel\nseparately). The `depthMultplier` argument controls how many output channels\nare generated per input channel in the depthwise step.",
                "fileName": "#132",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L132-L141",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Core",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Activation",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "activation",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "ActivationLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.activation",
                    "documentation": "Name of activation function to use. See [activations](../activations.ts).",
                    "type": "string",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Activation",
                "documentation": "Applies an activation function to an output.",
                "fileName": "#144",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L144-L153",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Dense",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "dense",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "DenseLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.units",
                    "documentation": "Positive integer, dimensionality of the output space. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.activation",
                    "documentation": "Activation function to use (see [activations](../activations.md)).\nIf you don't specify anything, no activation is applied (ie. \"linear\"\nactivation: `a(x) = x`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.useBias",
                    "documentation": "Whether the layer uses a bias vector. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix (see\n[initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasInitializer",
                    "documentation": "Initializer for the bias vector (see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.inputDim",
                    "documentation": "If inputShape is not specified, and inputDim is, then the expected\ninputShape is [inputDim].",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelConstraint",
                    "documentation": "kernelConstraint: Constraint for the kernel weights",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasConstraint",
                    "documentation": "biasConstraint: Constraint for the bias vector",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelRegularizer",
                    "documentation": "kernelRegularizer:  Regularizer function applied to the `kernel` weights\nmatrix",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasRegularizer",
                    "documentation": "biasRegularizer:  Regularizer function applied to the bias vector",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.activityRegularizer",
                    "documentation": "activityRegularizer:  Regularizer function applied to the activation",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Dense",
                "documentation": "Just your regular densely-connected NN layer.\n   `Dense` implements the operation:\n   `output = activation(dot(input, kernel) + bias)`\n   where `activation` is the element-wise activation function\n   passed as the `activation` argument, `kernel` is a weights matrix\n   created by the layer, and `bias` is a bias vector created by the layer\n   (only applicable if `useBias` is `true`).\n   Note: if the input to the layer has a rank greater than 2, then\n   it is flattened prior to the initial dot product with `kernel`.\n\nInput shape\n   nD tensor with shape: `(batchSize, ..., inputDim)`.\n   The most common situation would be\n   a 2D input with shape `(batchSize, inputDim)`.\nOutput shape\n   nD tensor with shape: `(batchSize, ..., units)`.\n   For instance, for a 2D input with shape `(batchSize, inputDim)`,\n   the output would have shape `(batchSize, units)`.",
                "fileName": "#155",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L155-L164",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Dropout",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "dropout",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "DropoutLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.rate",
                    "documentation": "float between 0 and 1. Fraction of the input units to drop. ",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.noiseShape",
                    "documentation": "Integer array representing the shape of the\nbinary dropout mask that will be multiplied with the input.\nFor instance, if your inputs have shape\n`(batchSize, timesteps, features)` and\nyou want the dropout mask to be the same for all timesteps,\nyou can use `noise_shape=(batch_size, 1, features)`.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.seed",
                    "documentation": "An integer to use as random seed. ",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Dropout",
                "documentation": "Applies Dropout to the input.\n\nDropout consists in randomly setting\na fraction `rate` of input units to 0 at each update during training time,\nwhich helps prevent overfitting.\n\nReferences\n- [Dropout: A Simple Way to Prevent Neural Networks from\nOverfitting](http://www.cs.toronto.edu/~rsalakhu/papers/srivastava14a.pdf)",
                "fileName": "#166",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L166-L175",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Flatten",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "flatten",
                "namespace": "layers",
                "paramStr": "(config?)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "LayerConfig",
                    "optional": true,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.config.inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both inputShape and batchInputShape are defined, batchInputShape\nwill be used. Only applicable to input layers.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both inputShape and batchInputShape are defined, batchInputShape\nwill be used. Only applicable to input layers.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.batchSize",
                    "documentation": "If inputShape is specified, but not batchInputShape, batchSize is used\nto construct the batchInputShape: [batchSize].concat(inputShape)",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.dtype",
                    "documentation": "DType for this layer. If not specified, defaults to K.floatx(). Only\napplicable to input layers.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.name",
                    "documentation": "Optional name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.trainable",
                    "documentation": "Whether this layer is trainable. If not specified, defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.updatable",
                    "documentation": "TODO(michaelterry): Document this. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.weights",
                    "documentation": "If defined, the layer's initial weight values will be set to this argument.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Flatten",
                "documentation": "Flattens the input. Does not affect the batch size.\n\nA `Flatten` layer flattens each batch sample in its inputs to 1D (hence the\noutput is 2D total).\n\nFor example:\n\n```js\nconst input = tf.input({shape: [4, 3]});\nconst flattenLayer = tf.layers.flatten();\n// Inspect the inferred output shape of the flatten layer, which\n// equals `[null, 12]`. The 2nd dimension is 4 * 3, i.e., the result of the\n// flattening. (The 1st dimension is the undermined batch size.)\nconsole.log(flattenLayer.apply(input).shape);\n```",
                "fileName": "#177",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L177-L186",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "RepeatVector",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "repeatVector",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "RepeatVectorLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.n",
                    "documentation": "Integer, repetition factor.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "RepeatVector",
                "documentation": "Repeat the input n times.",
                "fileName": "#188",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L188-L197",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Core",
                  "namespace": "layers",
                  "useDocsFrom": "Embedding",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "embedding",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "EmbeddingLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.inputDim",
                    "documentation": "inputDim:\n     int > 0. Size of the vocabulary, i.e. maximum integer index + 1.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.outputDim",
                    "documentation": "outputDim:\n     int >= 0. Dimension of the dense embedding.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.embeddingsInitializer",
                    "documentation": "embeddingsInitializer:\n     Initializer for the `embeddings` matrix\n     (see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.embeddingsRegularizer",
                    "documentation": "embeddingsRegularizer:\n     Regularizer function applied to the `embeddings` matrix.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.activityRegularizer",
                    "documentation": "activityRegularizer:\n     Regularizer function applied to the activation.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.embeddingsConstraint",
                    "documentation": "embeddingsConstraint: Constraint function applied to\n    the `embeddings` matrix\n    (see [constraints](../constraints.md)).",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.maskZero",
                    "documentation": "mask_zero: Whether or not the input value 0 is a special \"padding\"\n     value that should be masked out.\n     This is useful when using [recurrent layers](recurrent.md)\n     which may take variable length input.\n     If this is `True` then all subsequent layers\n     in the model need to support masking or an exception will be raised.\n     If mask_zero is set to True, as a consequence, index 0 cannot be\n     used in the vocabulary (input_dim should equal size of\n     vocabulary + 1).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.inputLength",
                    "documentation": "inputLength:\n     Length of input sequences, when it is constant.\n     This argument is required if you are going to connect\n     `Flatten` then `Dense` layers upstream\n     (without it, the shape of the dense outputs cannot be computed).",
                    "type": "number|number[]",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Embedding",
                "documentation": "Turns positive integers (indexes) into dense vectors of fixed size.\neg. [[4], [20]] -> [[0.25, 0.1], [0.6, -0.2]]\n\n   # Input shape\n       2D tensor with shape: `[batchSize, sequenceLength]`.\n\n   # Output shape\n       3D tensor with shape: `[batchSize, sequenceLength, outputDim]`.",
                "fileName": "#199",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L199-L208",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Merge",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Add",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "add",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "MergeLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Add",
                "documentation": "Layer that adds a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape).\n\n// TODO(cais): Add examples.",
                "fileName": "#212",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L212-L221",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Average",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "average",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "MergeLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Average",
                "documentation": "Layer that averages a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape, and returns a\nsingle tensor (also of the same shape).",
                "fileName": "#223",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L223-L232",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Concatenate",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "concatenate",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "ConcatenateLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.axis",
                    "documentation": "Axis along which to concatenate.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Concatenate",
                "documentation": "Layer that concatenates a list of inputs.\n\nIt takes a list of tensors, all of the same shape except for the\nconcatenation axis, and returns a single tensor, the concatenation\nof all inputs.",
                "fileName": "#234",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L234-L243",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Maximum",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maximum",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "MergeLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Maximum",
                "documentation": "Layer that computes the maximum (element-wise) a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape).",
                "fileName": "#245",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L245-L254",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Minimum",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "minimum",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "MergeLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Minimum",
                "documentation": "Layer that computes the minimum (element-wise) a list of inputs.\n\nIt takes as input a list of tensors, all of the same shape and returns a\nsingle tensor (also of the same shape).",
                "fileName": "#256",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L256-L265",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Merge",
                  "namespace": "layers",
                  "useDocsFrom": "Multiply",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "multiply",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "MergeLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  }
                ],
                "returnType": "Multiply",
                "documentation": "Layer that multiplies (element-wise) an Array of inputs.\n\nIt takes as input an Array of tensors, all of the same\nshape, and returns a single tensor (also of the same shape).",
                "fileName": "#267",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L267-L276",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Normalization",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Normalization",
                  "namespace": "layers",
                  "useDocsFrom": "BatchNormalization",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "batchNormalization",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "BatchNormalizationLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.axis",
                    "documentation": "Integer, the axis that should be normalized (typically the features axis).\nFor instance, after a `Conv2D` layer with `data_format=\"channels_first\"`,\nset `axis=1` in `BatchNormalization`.\nDefault: -1.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.momentum",
                    "documentation": "Momentum of the moving average.\nDefault: 0.99.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.epsilon",
                    "documentation": "Small float added to the variance to avoid dividing by zero.\nDefault: 1e-3.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.center",
                    "documentation": "If `true`, add offset of `beta` to normalized tensor.\nIf `false`, `beta` is ignored.\nDefault: true.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.scale",
                    "documentation": "If `true`, multiply by `gamma`.\nIf `false`, `gamma` is not used.\nWhen the next layer is linear (also e.g. `nn.relu`),\nthis can be disabled since the scaling will be done by the next layer.\nDefault: true.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.betaInitializer",
                    "documentation": "Initializer for the beta weight.\nDefault: 'Zeros'.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.gammaInitializer",
                    "documentation": "Initializer for the gamma weight.\nDefault: 'Ones'.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.movingMeanInitializer",
                    "documentation": "Initializer for the moving mean.\nDefault: 'Zeros'",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.movingVarianceInitializer",
                    "documentation": "Initializer for the moving variance.\nDefault: 'Ones'.",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.betaConstraint",
                    "documentation": "Optional constraint for the beta weight.",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.gammaConstraint",
                    "documentation": "Optional constraint for gamma weight.",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.betaRegularizer",
                    "documentation": "Optional regularizer for the beta weight.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.gammaRegularizer",
                    "documentation": "Optional regularizer for the gamma weight.",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "BatchNormalization",
                "documentation": "Batch normalization layer (Ioffe and Szegedy, 2014).\n\nNormalize the activations of the previous layer at each batch,\ni.e. applies a transformation that maintains the mean activation\nclose to 0 and the activation standard deviation close to 1.\n\nInput shape:\n   Arbitrary. Use the keyword argument `inputShape` (Array of integers, does\n   not include the sample axis) when calling the constructor of this class,\n   if this layer is used as a first layer in a model.\n\nOutput shape:\n   Same shape as input.\n\nReferences:\n   - [Batch Normalization: Accelerating Deep Network Training by Reducing\nInternal Covariate Shift](https://arxiv.org/abs/1502.03167)",
                "fileName": "#280",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L280-L290",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Pooling",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "AvgPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "avgPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Pooling1DLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.poolSize",
                    "documentation": "Integer size of the window to pool over.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.strides",
                    "documentation": "Period at which to sample the pooled values.\n   If None, it will default to `poolSize`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.padding",
                    "documentation": "PaddingMode.VALID or PaddingMode.SAME ",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "AvgPooling1D",
                "documentation": "Average pooling operation for spatial data.\n   Input shape:  `[batchSize, inLength, channels]`\n   Output shape: `[batchSize, pooledLength, channels]`",
                "fileName": "#293",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L293-L302",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "AvgPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "avgPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Pooling2DLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.poolSize",
                    "documentation": "poolSize: integer or tuple of 2 integers,\n   factors by which to downscale [vertical, horizontal].\n   [2, 2] will halve the input in both spatial dimension.\n   If only one integer is specified, the same window length\n   will be used for both dimensions.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.strides",
                    "documentation": "strides: Integer, tuple of 2 integers, or None.\n   Strides values.\n   If None, it will default to `poolSize`.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.padding",
                    "documentation": "",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.dataFormat",
                    "documentation": "",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "AvgPooling2D",
                "documentation": "Average pooling operation for spatial data.\n   Input shape\n      - If `dataFormat === CHANNEL_LAST`:\n          4D tensor with shape:\n          `[batchSize, rows, cols, channels]`\n      - If `dataFormat === CHANNEL_FIRST`:\n          4D tensor with shape:\n          `[batchSize, channels, rows, cols]`\n   Output shape\n      - If `dataFormat === CHANNEL_LAST`:\n          4D tensor with shape:\n          `[batchSize, pooleRows, pooledCols, channels]`\n      - If `dataFormat === CHANNEL_FIRST`:\n          4D tensor with shape:\n          `[batchSize, channels, pooleRows, pooledCols]`",
                "fileName": "#304",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L304-L313",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalAveragePooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalAveragePooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "LayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.config.inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both inputShape and batchInputShape are defined, batchInputShape\nwill be used. Only applicable to input layers.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both inputShape and batchInputShape are defined, batchInputShape\nwill be used. Only applicable to input layers.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.batchSize",
                    "documentation": "If inputShape is specified, but not batchInputShape, batchSize is used\nto construct the batchInputShape: [batchSize].concat(inputShape)",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.dtype",
                    "documentation": "DType for this layer. If not specified, defaults to K.floatx(). Only\napplicable to input layers.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.name",
                    "documentation": "Optional name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.trainable",
                    "documentation": "Whether this layer is trainable. If not specified, defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.updatable",
                    "documentation": "TODO(michaelterry): Document this. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.weights",
                    "documentation": "If defined, the layer's initial weight values will be set to this argument.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "GlobalAveragePooling1D",
                "documentation": "Global average pooling operation for temporal data.\nInput Shape:\n   3D tensor with shape: `[batchSize, steps, features]`.\nOutput Shape:\n   2D tensor with shape: `[batchSize, features]`.",
                "fileName": "#315",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L315-L324",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalAveragePooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalAveragePooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "GlobalPooling2DLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.dataFormat",
                    "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "GlobalAveragePooling2D",
                "documentation": "Global average pooling operation for spatial data.\n\nInput shape:\n   If `dataFormat` is `CHANNEL_LAST`:\n     4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   If `dataFormat` is `CHANNEL_FIRST`:\n     4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
                "fileName": "#326",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L326-L336",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalMaxPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalMaxPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "LayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.config.inputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both inputShape and batchInputShape are defined, batchInputShape\nwill be used. Only applicable to input layers.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.batchInputShape",
                    "documentation": "If defined, will be used to create an input layer to insert before this\nlayer. If both inputShape and batchInputShape are defined, batchInputShape\nwill be used. Only applicable to input layers.",
                    "type": "number[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.batchSize",
                    "documentation": "If inputShape is specified, but not batchInputShape, batchSize is used\nto construct the batchInputShape: [batchSize].concat(inputShape)",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.dtype",
                    "documentation": "DType for this layer. If not specified, defaults to K.floatx(). Only\napplicable to input layers.",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.name",
                    "documentation": "Optional name for this layer. ",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.trainable",
                    "documentation": "Whether this layer is trainable. If not specified, defaults to true. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.updatable",
                    "documentation": "TODO(michaelterry): Document this. ",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.weights",
                    "documentation": "If defined, the layer's initial weight values will be set to this argument.",
                    "type": "Tensor[]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.config.inputDType",
                    "documentation": "Legacy support. Do not use for new code. ",
                    "type": "'float32'|'int32'|'bool'",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "GlobalMaxPooling1D",
                "documentation": "Global max pooling operation for temporal data.\nInput Shape:\n   3D tensor with shape: `[batchSize, steps, features]`.\nOutput Shape:\n   2D tensor with shape: `[batchSize, features]`.",
                "fileName": "#338",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L338-L347",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "GlobalMaxPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "globalMaxPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "GlobalPooling2DLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.dataFormat",
                    "documentation": "One of `CHANNEL_LAST` (default) or `CHANNEL_FIRST`.\nThe ordering of the dimensions in the inputs. `CHANNEL_LAST` corresponds\nto inputs with shape `[batch, height, width, channels[` while\n`CHANNEL_FIRST` corresponds to inputs with shape\n`[batch, channels, height, width]`.",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "GlobalMaxPooling2D",
                "documentation": "Global max pooling operation for spatial data.\n\nInput shape:\n   If `dataFormat` is `CHANNEL_LAST`:\n     4D tensor with shape: `[batchSize, rows, cols, channels]`.\n   If `dataFormat` is `CHANNEL_FIRST`:\n     4D tensor with shape: `[batchSize, channels, rows, cols]`.\n\nOutput shape:\n   2D tensor with shape: `[batchSize, channels]`.",
                "fileName": "#349",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L349-L359",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "MaxPooling1D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maxPooling1d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Pooling1DLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.poolSize",
                    "documentation": "Integer size of the window to pool over.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.strides",
                    "documentation": "Period at which to sample the pooled values.\n   If None, it will default to `poolSize`.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.padding",
                    "documentation": "PaddingMode.VALID or PaddingMode.SAME ",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "MaxPooling1D",
                "documentation": "Max pooling operation for temporal data.\n   Input shape:  `[batchSize, inLength, channels]`\n   Output shape: `[batchSize, pooledLength, channels]`",
                "fileName": "#361",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L361-L370",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Pooling",
                  "namespace": "layers",
                  "useDocsFrom": "MaxPooling2D",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "maxPooling2d",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "Pooling2DLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.config.poolSize",
                    "documentation": "poolSize: integer or tuple of 2 integers,\n   factors by which to downscale [vertical, horizontal].\n   [2, 2] will halve the input in both spatial dimension.\n   If only one integer is specified, the same window length\n   will be used for both dimensions.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.strides",
                    "documentation": "strides: Integer, tuple of 2 integers, or None.\n   Strides values.\n   If None, it will default to `poolSize`.",
                    "type": "[number, number]",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.padding",
                    "documentation": "",
                    "type": "PaddingMode",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.config.dataFormat",
                    "documentation": "",
                    "type": "DataFormat",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "MaxPooling2D",
                "documentation": "Max pooling operation for spatial data.\n   Input shape\n      - If `dataFormat === CHANNEL_LAST`:\n          4D tensor with shape:\n          `[batchSize, rows, cols, channels]`\n      - If `dataFormat === CHANNEL_FIRST`:\n         4D tensor with shape:\n          `[batchSize, channels, rows, cols]`\n   Output shape\n      - If `dataFormat=CHANNEL_LAST`:\n          4D tensor with shape:\n          `[batchSize, pooleRows, pooledCols, channels]`\n      - If `dataFormat=CHANNEL_FIRST`:\n          4D tensor with shape:\n          `[batchSize, channels, pooleRows, pooledCols]`",
                "fileName": "#372",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L372-L381",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Recurrent",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "GRU",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "gru",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "GRULayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n   Mode 1 will structure its operations as a larger number of\n   smaller dot products and additions, whereas mode 2 will\n   batch them into fewer, larger operations. These modes will\n   have different performance profiles on different hardware and\n   for different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "GRU",
                "documentation": "Gated Recurrent Unit - Cho et al. 2014.",
                "fileName": "#385",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L385-L394",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "GRUCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "gruCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "GRUCellLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n(see [activations](../activations.md)).\nDefault: hard sigmoid (`hardSigomid`).\nIf you pass `null`, no activation is applied\n(ie. \"linear\" activation: `a(x) = x`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n   Mode 1 will structure its operations as a larger number of\n   smaller dot products and additions, whereas mode 2 will\n   batch them into fewer, larger operations. These modes will\n   have different performance profiles on different hardware and\n   for different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "GRUCell",
                "documentation": "Cell class for the GRU layer.",
                "fileName": "#396",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L396-L405",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "LSTM",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "lstm",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "LSTMLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.unitForgetBias",
                    "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'Zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n   Mode 1 will structure its operations as a larger number of\n   smaller dot products and additions, whereas mode 2 will\n   batch them into fewer, larger operations. These modes will\n   have different performance profiles on different hardware and\n   for different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "LSTM",
                "documentation": "Long-Short Term Memory layer - Hochreiter 1997.",
                "fileName": "#407",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L407-L416",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "LSTMCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "lstmCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "LSTMCellLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.recurrentActivation",
                    "documentation": "Activation function to use for the recurrent step.\n(see [activations](../activations.md)).\nDefault: hard sigmoid (`hardSigomid`).\nIf you pass `null`, no activation is applied\n(ie. \"linear\" activation: `a(x) = x`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.unitForgetBias",
                    "documentation": "If `true`, add 1 to the bias of the forget gate at initialization.\nSetting it to `true` will also force `biasInitializer = 'Zeros'`.\nThis is recommended in\n[Jozefowicz et\nal.](http://www.jmlr.org/proceedings/papers/v37/jozefowicz15.pdf).",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.implementation",
                    "documentation": "Implementation mode, either 1 or 2.\n   Mode 1 will structure its operations as a larger number of\n   smaller dot products and additions, whereas mode 2 will\n   batch them into fewer, larger operations. These modes will\n   have different performance profiles on different hardware and\n   for different applications.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "LSTMCell",
                "documentation": "Cell class for the LSTM layer.",
                "fileName": "#418",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L418-L427",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "SimpleRNN",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "simpleRNN",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "SimpleRNNLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.units",
                    "documentation": "units: Positive integer, dimensionality of the output space.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.activation",
                    "documentation": "Activation function to use (see [activations](../activations.md)).\nDefault: hyperbolic tangent (`tanh`).\nIf you pass `null`, no activation will be applied\n(i.e., \"linear\" activation: `a(x) = x`).",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.useBias",
                    "documentation": "Whether the layer uses a bias vector.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs (see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentInitializer",
                    "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state\n(see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasInitializer",
                    "documentation": "Initializer for the bias vector (see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelRegularizer",
                    "documentation": "Regularizer function applied to the `kernel` weights matrix\n(see [regularizer](../regularizers.md)).",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentRegularizer",
                    "documentation": "Regularizer function applied to the `recurrent_kernel` weights matrix.\n(see [regularizer](../regularizers.md))",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.\n(see [regularizer](../regularizers.md))",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelConstraint",
                    "documentation": "Constraint function applied to the `kernel` weights matrix.\n(see [constraints](../constraints.md)).",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentConstraint",
                    "documentation": "Constraint function applied to the `recurrentKernel` weights matrix.\n(see [constraints](../constraints.md)).",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasConstraint",
                    "documentation": "Constraintfunction applied to the bias vector.\n(see [constraints](../constraints.md)).",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.dropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentDropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "SimpleRNN",
                "documentation": "Fully-connected RNN where the output is to be fed back to input.",
                "fileName": "#429",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L429-L438",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Recurrent",
                  "namespace": "layers",
                  "useDocsFrom": "SimpleRNNCell",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "simpleRNNCell",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "SimpleRNNCellLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.units",
                    "documentation": "units: Positive integer, dimensionality of the output space.",
                    "type": "number",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.activation",
                    "documentation": "Activation function to use (see [activations](../activations.md)).\nDefault: hyperbolic tangent (`tanh`).\nIf you pass `null`,  'linear' activation will be applied.",
                    "type": "string",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.useBias",
                    "documentation": "Whether the layer uses a bias vector.",
                    "type": "boolean",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelInitializer",
                    "documentation": "Initializer for the `kernel` weights matrix, used for the linear\ntransformation of the inputs (see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentInitializer",
                    "documentation": "Initializer for the `recurrentKernel` weights matrix, used for\nlinear transformation of the recurrent state\n(see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasInitializer",
                    "documentation": "Initializer for the bias vector (see [initializers](../initializers.md)).",
                    "type": "string|Initializer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelRegularizer",
                    "documentation": "Regularizer function applied to the `kernel` weights matrix\n(see [regularizer](../regularizers.md)).",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentRegularizer",
                    "documentation": "Regularizer function applied to the `recurrent_kernel` weights matrix.\n(see [regularizer](../regularizers.md))",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasRegularizer",
                    "documentation": "Regularizer function applied to the bias vector.\n(see [regularizer](../regularizers.md))",
                    "type": "string|Regularizer",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.kernelConstraint",
                    "documentation": "Constraint function applied to the `kernel` weights matrix.\n(see [constraints](../constraints.md)).",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentConstraint",
                    "documentation": "Constraint function applied to the `recurrentKernel` weights matrix.\n(see [constraints](../constraints.md)).",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.biasConstraint",
                    "documentation": "Constraintfunction applied to the bias vector.\n(see [constraints](../constraints.md)).",
                    "type": "string|Constraint",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.dropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the inputs.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.recurrentDropout",
                    "documentation": "Float number between 0 and 1. Fraction of the units to drop for the linear\ntransformation of the recurrent state.",
                    "type": "number",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "SimpleRNNCell",
                "documentation": "",
                "fileName": "#440",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L440-L449",
                "isFunction": true
              }
            ]
          },
          {
            "name": "Wrapper",
            "symbols": [
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Wrapper",
                  "namespace": "layers",
                  "useDocsFrom": "Bidirectional",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "bidirectional",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "BidirectionalLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.layer",
                    "documentation": "The instance of an `RNN` layer to be wrapped.",
                    "type": "RNN",
                    "optional": false,
                    "isConfigParam": true
                  },
                  {
                    "name": "config.mergeMode",
                    "documentation": "Mode by which outputs of the forward and backward RNNs are combinied.\nIf `null` or `undefined`, the output will not be combined, they will be\nreturned as an `Array`.",
                    "type": "BidirectionalMergeMode",
                    "optional": true,
                    "isConfigParam": true
                  }
                ],
                "returnType": "Bidirectional",
                "documentation": "",
                "fileName": "#453",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L453-L462",
                "isFunction": true
              },
              {
                "docInfo": {
                  "heading": "Layers",
                  "subheading": "Wrapper",
                  "namespace": "layers",
                  "useDocsFrom": "TimeDistributed",
                  "configParamIndices": [
                    0
                  ]
                },
                "symbolName": "timeDistributed",
                "namespace": "layers",
                "paramStr": "(config)",
                "parameters": [
                  {
                    "name": "config",
                    "documentation": "",
                    "type": "WrapperLayerConfig",
                    "optional": false,
                    "isConfigParam": false
                  },
                  {
                    "name": "config.layer",
                    "documentation": "The layer to be wrapped.",
                    "type": "Layer",
                    "optional": false,
                    "isConfigParam": true
                  }
                ],
                "returnType": "TimeDistributed",
                "documentation": "This wrapper applies a layer to every temporal slice of an input.\n\nThe input should be at least 3D,  and the dimension of the index `1` will be\nconsidered to be the temporal dimension.\n\nConsider a batch of 32 samples, where each sample is a sequence of 10 vectors\nof 16 dimensions. The batch input shape of the layer is then `[32,  10,\n16]`, and the `inputShape`, not including the sample dimension, is\n`[10, 16]`.\n\nYou can then use `TimeDistributed` to apply a `Dense` layer to each of the 10\ntimesteps, independently:\n\n```typescript\nconst model = new Sequential();\nmodel.add(new TimeDistributed({\n   layer: new Dense({units: 8}),\n   inputShape: [10, 16],\n});\n// Now model.outputShape = [null, 10, 8].\n```\n\nThe output will then have shape `[32, 10, 8]`.\n\nIn subsequent layers, there is no need for `inputShape`:\n```typescript\nmodel.add(new TimeDistributed({layer: new Dense(32)});\n// Now model.outputShape = [null, 10, 32].\n```\n\nThe output will then have shape `[32, 10, 32]`.\n\n`TimeDistributed` can be used with arbitrary layers, not just `Dense`, for\ninstance a `Conv2D` layer.\n\n```typescript\nconst model = new Sequential();\nmodel.add(new TimeDistributed({\n   layer: new Conv2D({filter: 64, kernelSize: [3, 3]}),\n   inputShape: [10, 299, 299, 3]\n});\n```",
                "fileName": "#464",
                "githubUrl": "https://github.com/tensorflow/tfjs-layersblob/master/src/exports.ts#L464-L473",
                "isFunction": true
              }
            ]
          }
        ]
      }
    ]
  },
  "docLinkAliases": {}
}
